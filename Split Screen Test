import pygame, pygame.gfxdraw, random, math
# Player class to define players
class Wall(pygame.sprite.Sprite):
    def __init__(self, x,y, width, height, group):
        self.groups = group
        pygame.sprite.Sprite.__init__(self, self.groups)
        self.image = pygame.Surface((width,height))
        self.image.fill((0,0,0))
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

class Map:
    def __init__(self):
        self.map_data = []
        with open("maps.txt", "r") as file:
            for line in file:
                self.map_data.append(line)

        self.width = len(self.map_data[0]) * 32
        self.height = len(self.map_data) * 32

class Camera:
    def __init__(self, width, height):
        self.camera = pygame.Rect(0,0, width, height)
        self.width = width
        self.height = height

    def apply(self, sprite):
        new_rect = pygame.Rect(sprite.rect.x + self.camera.x, sprite.rect.y + self.camera.y, sprite.rect.width, sprite.rect.height)
        return new_rect

    def update(self, target, screenw, screenh):
        x = -target.rect.x + screenw //4
        y = -target.rect.y + screenh //2

        x = max(min(0,x), - (32*32 - screenw//2))
        y = max(min(0,y), - (32*32 - screenh))
        self.camera = pygame.Rect(x,y, self.width, self.height)
class Player(pygame.sprite.Sprite):
    FRICTION = 0.75
    MAX_VELOCITY = 5
    ACCELERATION = 1.5

    def __init__(self, position, width):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface([width, width], pygame.SRCALPHA)
        pygame.draw.circle(self.image, (200, 10, 69), [width//2, width//2], width//2)
        self.original_image = self.image.copy()
        self.rect = self.image.get_rect()
        self.width = width
        self.rect.center = position
        self.xvel = 0
        self.yvel = 0
        self.position = position
        self.angle = 0
        self.deceleration = True

    # Accelerate forward in the direction the player is facing
    def thrust(self):
        # Calculate the horizontal component of velocity
        self.xvel = self.xvel + self.ACCELERATION * math.cos(math.radians(self.angle))
        # Calculate the vertical component of velocity
        self.yvel = self.yvel + self.ACCELERATION * math.sin(math.radians(self.angle))

        # Make sure the velocity doesn't go above the max velocity
        if self.xvel > self.MAX_VELOCITY:
            self.xvel = self.MAX_VELOCITY
        if self.xvel < -self.MAX_VELOCITY:
            self.xvel = -self.MAX_VELOCITY
        if self.yvel > self.MAX_VELOCITY:
            self.yvel = self.MAX_VELOCITY
        if self.yvel < -self.MAX_VELOCITY:
            self.yvel = -self.MAX_VELOCITY

    def bouncex(self):
        self.xvel = -self.xvel / 2

    def bouncey(self):
        self.yvel = -self.yvel / 2

    def move_right(self):
        self.angle = 0
        self.thrust()

    def move_up(self):
        self.angle = 270
        self.thrust()

    def move_left(self):
        self.angle = 180
        self.thrust()

    def move_down(self):
        self.angle = 90
        self.thrust()

    def move(self, left, right, up, down):
        if left:
            self.move_left()
        if right:
            self.move_right()
        if up:
            self.move_up()
        if down:
            self.move_down()

    def get_position(self):
        return self.position

    def set_position(self, x, y):
        self.position = [x, y]

    # Called every frame
    def update(self, *args):

        self.image = pygame.transform.rotate(self.original_image, self.angle)
        # Get new rect object
        self.rect = self.image.get_rect()
        # Set the rect center to the new position
        self.rect.center = self.position

        # Decrease velocity every frame by the friction of the surface as long as its
        # greater than 0
        if self.deceleration:
            if -1 < self.xvel < 1:
                self.xvel = 0
            elif self.xvel >= 1:
                self.xvel -= self.FRICTION
            else:
                self.xvel += self.FRICTION

            if -1 < self.yvel < 1:
                self.yvel = 0
            elif self.yvel >= 1:
                self.yvel -= self.FRICTION
            else:
                self.yvel += self.FRICTION

WIDTH_LIGHT = 30
MAX_DISTANCE = 100
FPS = 40

def calculate_angle(x1,y1,x2,y2):
    if x1 - x2 != 0:
        y = y1 - y2
        x = x1 - x2
        angle = math.degrees(math.atan(y / x))
        if x < 0 and y > 0 or x < 0 and y < 0:
            angle += 180
        return angle
    return None

def get_light(center, angle):
    pointlist = [center]
    for x in range(-1*WIDTH_LIGHT, WIDTH_LIGHT+1):
        current = angle + x
        hit = False
        targetposy = center[1] + (2 * math.sin(math.radians(current)) * MAX_DISTANCE)
        targetposx = center[0] + (2 * math.cos(math.radians(current)) * MAX_DISTANCE)
        xdisp = (targetposx - center[0]) / MAX_DISTANCE
        ydisp = (targetposy - center[1]) / MAX_DISTANCE
        for y in range(MAX_DISTANCE):
            for wall in renderlist:
                if camera.apply(wall).collidepoint((center[0] + xdisp * y), (center[1] + ydisp * y)):
                    pointlist.append(((center[0] + xdisp * y), (center[1] + ydisp * y)))
                    hit = True
                    break
            if hit:
                break

        if not hit:
            pointlist.append((targetposx, targetposy))
    return pointlist


def check_collisions():
    collides = False
    new_rect = pygame.Rect(position[0] + player.xvel - player.rect.width / 2, position[1] + player.yvel - player.rect.height / 2, player.rect.width, player.rect.height)
    for wall in renderlist:
        if new_rect.colliderect(wall):
            collides = True

    if not collides:
        player.position[0] += player.xvel
    else:
        player.bouncex()

    if not collides:
        player.position[1] += player.yvel
    else:
        player.bouncey()


def draw_screen():
    screen.fill((255,255,255))
    box_surface_fill = pygame.Surface((WIDTH, HEIGHT), pygame.SRCALPHA)
    player1surface.fill((255, 255, 255))
    pygame.draw.polygon(box_surface_fill, (255, 255, 100, max(0, min(brightness, 255))), pointlist)
    player1surface.blit(box_surface_fill, (0, 0))
    sprites.update()
    walls_sprites.update()
    camera.update(player, WIDTH, HEIGHT)
    for sprite in sprites:
        player1surface.blit(sprite.image, camera.apply(sprite))

    for wall in walls_sprites:
        player1surface.blit(wall.image, camera.apply(wall))
    screen.blit(player1surface,(0,0))
    pygame.draw.rect(screen, (125, 124, 200), render, 1)
    pygame.display.flip()


# WIDTH = 1250
# HEIGHT = 950
WIDTH = 1000
HEIGHT = 500
player1surface=pygame.Surface([WIDTH/2,HEIGHT])
pygame.init()
screen = pygame.display.set_mode([WIDTH, HEIGHT])

walls = []
map = Map()

center = [WIDTH/2, HEIGHT/2]
mouse_position = center
sprites = pygame.sprite.Group()
renderlist = pygame.sprite.Group()
walls_sprites = pygame.sprite.Group()

for y, tiles in enumerate(map.map_data):
    for x, tile in enumerate(tiles):
        if tile == "#":
            Wall(x*32, y*32, 32, 32, walls_sprites)

Wall(0, 0, 32*32,32, walls_sprites)
Wall(0,0, 32, 32*32, walls_sprites)
Wall(32*31, 0, 32, 32*32, walls_sprites)
Wall(0, 32*31, 32*32, 32, walls_sprites)

player = Player([WIDTH/2, HEIGHT/2], 20)
sprites.add(player)
render = pygame.Rect(WIDTH/2 - MAX_DISTANCE * 2, HEIGHT/2 - MAX_DISTANCE * 2, MAX_DISTANCE * 4,MAX_DISTANCE * 4)
camera = Camera(WIDTH, HEIGHT)
targetangle = 260
crashed = False
forward = False
left = False
right = False
down = False
brightness = 180
clock = pygame.time.Clock()
actual = camera.apply(player)
while not crashed:

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            crashed = True
        if event.type == pygame.MOUSEMOTION:
            mouse_position = event.pos
        if event.type == pygame.KEYDOWN:

            if event.key == pygame.K_w:
                forward = True
            if event.key == pygame.K_s:
                down = True
            if event.key == pygame.K_a:
                left = True
            if event.key == pygame.K_d:
                right = True
            if event.key == pygame.K_UP:
                brightness += 10
            if event.key == pygame.K_DOWN:
                brightness -= 10

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_w:
                forward = False
            if event.key == pygame.K_s:
                down = False
            if event.key == pygame.K_a:
                left = False
            if event.key == pygame.K_d:
                right = False


    player.move(left, right, forward, down)

    position = player.get_position()
    actual = camera.apply(player)
    new_angle = calculate_angle(mouse_position[0], mouse_position[1], actual.x + player.width, actual.y + player.width)
    if new_angle:
        targetangle = new_angle
    changex = 0
    changey = 0
    targetposy1 = actual.y + (2 * math.sin(math.radians(targetangle + -1 * WIDTH_LIGHT)) * (MAX_DISTANCE + 20))
    targetposx1 = actual.x + (2 * math.cos(math.radians(targetangle + -1 * WIDTH_LIGHT)) * (MAX_DISTANCE + 20))
    targetposx2 = actual.x + (2 * math.cos(math.radians(targetangle + WIDTH_LIGHT)) * (MAX_DISTANCE + 20))
    targetposy2 = actual.y + (2 * math.sin(math.radians(targetangle + WIDTH_LIGHT)) * (MAX_DISTANCE + 20))
    maxx = max(targetposx1, targetposx2, actual.x)
    miny = min(targetposy1, targetposy2, actual.y)
    minx = min(targetposx1, targetposx2, actual.x)
    maxy = max(targetposy1, targetposy2, actual.y)
    diffx = maxx - minx
    diffy = maxy - miny
    render = pygame.Rect(maxx + changex - MAX_DISTANCE*2, miny + changey, diffx, diffy)
    pointlist = get_light([actual.x + player.width // 2, actual.y + player.width // 2], targetangle)
    check_collisions()
    for sprite in walls_sprites:
        print (camera.apply(sprite), render)
        if render.colliderect(camera.apply(sprite)):
            renderlist.add(sprite)#also have to add a second hitbox behind player so they can run into walls
        else:
            renderlist.remove(sprite)

    draw_screen()
    clock.tick(FPS)
